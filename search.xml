<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HexoConfigure</title>
    <url>/2020/04/13/HexoConfigure/</url>
    <content><![CDATA[<h1 id="hexo-配置记录">Hexo 配置记录</h1>
<p>个人的 Hexo 配置记录</p>
<a id="more"></a>
<h2 id="基本信息配置">基本信息配置</h2>
<p>在安装了<code>nmp</code> <code>hexo</code>后创建工作目录:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init &lt;floder&gt;</span><br><span class="line">cd &lt;floder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>以上命令初始化了工作目录.</p>
<p>在工作目录下有文件<code>_config.yml</code>, 设置基本信息, 如我的个人信息是:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">CaiNot's</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Learner</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Cai</span> <span class="string">Not</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>
<p>为了上传到<code>github</code> 需要再配置发布信息:(git 功能需要插件支持)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;User&gt;/&lt;repo&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用<code>hexo clean</code>来清理生成的文件 <code>hexo g</code>生成静态文件 <code>hexo d</code>发布文件 <code>hexo g -d</code> 来生成并发布文件</p>
<h2 id="基本插件设置">基本插件设置</h2>
<h3 id="git">git</h3>
<p>安装用于支持<code>git</code>的插件:<code>npm install hexo-deployer-git --save</code></p>
<h3 id="主题">主题</h3>
<p>安装<code>next</code>主题:在工作目录下执行<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code> 将 hexo 的配置信息中的主题改为 next, 如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h3 id="搜索">搜索</h3>
<p>安装用于支持搜索的插件<code>npm install hexo-generator-searchdb</code> 在 hexo 配置中添加:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>
<p>在主题<code>next</code>的配置文件中激活搜索</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="string">search</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>
<p>然后<code>hexo clean &amp;&amp; hexo g -d</code></p>
<h3 id="数学公式">数学公式</h3>
<p>官网描述道:</p>
<p>目前，NexT 提供两种数学公式渲染引擎，分别为 <code>MathJax</code> 和<code>Katex</code>。</p>
<p>如果你选择使用 MathJax 进行数学公式渲染，你需要使用 <code>hexo-renderer-pandoc</code> 或者 <code>hexo-renderer-kramed</code> （不推荐）作为 Hexo 的 Markdown 渲染器。</p>
<p>首先，卸载原有的渲染器 <code>hexo-renderer-marked</code>，并安装这两种渲染器的其中一个：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked</span><br><span class="line">npm install hexo-renderer-pandoc # 或者 hexo-renderer-kramed</span><br></pre></td></tr></table></figure>
<p>注意:<code>hexo-renderer-pandoc</code>需要本机安装<code>pandoc</code>支持, <a href="https://pandoc.org/installing.html" target="_blank" rel="noopener">pandoc 官网</a> 在 next 中激活:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="标签和分类">标签和分类</h3>
]]></content>
      <tags>
        <tag>configure</tag>
        <tag>hexo</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>GraduateWork</title>
    <url>/2020/04/13/GraduateWork/</url>
    <content><![CDATA[<h1 id="graduate-work">Graduate Work</h1>
<p>[TOC]</p>
<h2 id="description">Description</h2>
<p>这是我个人的关于毕业设计的实现过程的简要描述</p>
<h2 id="todo-list">Todo List</h2>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />
前期调研</li>
<li><input type="checkbox" disabled="" checked="" />
论文阅读</li>
<li><input type="checkbox" disabled="" checked="" />
框架设定</li>
<li><input type="checkbox" disabled="" checked="" />
代码阅读</li>
<li><input type="checkbox" disabled="" />
代码修改</li>
<li><input type="checkbox" disabled="" />
代码测试</li>
</ul>
<h2 id="timeline">Timeline</h2>
<h3 id="section">2020/3/25</h3>
<p>需要修改的地方包括</p>
<ol type="1">
<li>事务没有孩子时：<span class="math inline">\(f(t_i)=0\)</span></li>
<li>事务有孩子时：<span class="math inline">\(f(t_i)=\sum_{t_j\in \xi(t_i)}[f(t_j)+\theta_2 age+\theta_3 lock_num]\)</span></li>
<li>事务被释放时，对于每一个正在运行且未被阻塞的事务来说<span class="math inline">\(f\)</span>需要被更新</li>
</ol>
<p>任务安排：</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />
事务进入等待队列时，对其进行赋值</li>
<li><input type="checkbox" disabled="" />
事务释放后，需要重新把锁分配给对象，需要计算</li>
</ul>
<h3 id="section-1">2020/3/27</h3>
<p>编写测试脚本，该脚本的主要目的是确保数据库的连接数目&gt;32（这是触发 CATS 算法的最小值） 简单的想法就是，两个变量控制，<code>-S -X</code>分别控制 S 锁的线程数和 X 锁的线程数，用最简单的<code>for update</code>来上<code>X</code>锁</p>
<p>经过测试发现，用 shell 脚本很难控制，主要是不好主动在中途退出数据库，于是采用 python 来实现。</p>
<h2 id="questions-and-answers">Questions and Answers</h2>
<h3 id="无法-ping-通任何域名提示name-or-service-not-known">无法 ping 通任何域名，提示<code>Name or service not known</code>；</h3>
<p>直接 ping ip 地址，依然不通，系统内未安装<code>net-tools</code>，无法联网下载<code>ifconfig</code>等工具。</p>
<ol type="1">
<li>使用 systemctl restart network 或 service network restart 命令重启网卡失败</li>
<li>命令用错了，造成了找不到相应的网卡服务。</li>
<li>ubuntu 尝试<code>service network-manager restart</code>成功恢复</li>
</ol>
<h3 id="vscode-利用官方的-cc插件格式化代码出错code-formater-unknown-key之类的报错提示">VSCode 利用官方的 C/C++插件格式化代码出错：<code>Code formater unknown key</code>之类的报错提示</h3>
<ol type="1">
<li>查阅 google 得知这是因为官方使用的插件的问题，其中用了<code>LLVM</code>的<code>clang-format</code>来格式化代码</li>
<li>但是插件自带的<code>LLVM</code>版本太低，无法完美识别当前项目的自定义的<code>.clang-format</code>文件内容</li>
<li>查看 VSCode 设置发现，VSCode 首先在指定的目录下寻找<code>LLVM</code>，否则在环境变量中寻找<code>LLVM</code>，否则用自带的<code>clang-format</code></li>
<li>去官网下载最新的<code>LLVM</code>并加入系统变量中，重启 VSCode</li>
</ol>
<h3 id="build-mysql-并运行失败">build mysql 并运行失败</h3>
<p>初次运行需要初始化数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--basedir=/home/cainot/Projects/AI4Scheduling/db/mysql8 --datadir=/home/cainot/Projects/AI4Scheduling/db/mysql8/data --initialize-insecure --user=root</span><br></pre></td></tr></table></figure>
<p>注意，初始化数据库时<code>datadir</code>目录下应为空；</p>
<p>初始化结束后删除初始化和与用户信息再次运行即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--basedir=/home/cainot/Projects/AI4Scheduling/db/mysql8</span><br><span class="line">--datadir=/home/cainot/Projects/AI4Scheduling/db/mysql8/data</span><br></pre></td></tr></table></figure>
<h3 id="ant-下载需要配置代理">ANT 下载需要配置代理</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ANT_OPTS="-Dhttp.proxyHost=http://devnet-proxy.oa.com -Dhttp.proxyPort=8080 -Dhttps.proxyHost=http://devnet-proxy.oa.com -Dhttps.proxyPort=8080"</span><br></pre></td></tr></table></figure>
<p>记得需要 http 和 https 的代理</p>
<h3 id="oltp-bench-tool-连接数据库出错">Oltp-Bench tool 连接数据库出错</h3>
<p>数据库在编译调试的时候没有设置密码, 打开配置文件, 将</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameters</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Connection details --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbtype</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">dbtype</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DBUrl</span>&gt;</span>jdbc:mysql://localhost:3306/tpcc<span class="tag">&lt;/<span class="name">DBUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改为:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameters</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Connection details --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbtype</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">dbtype</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DBUrl</span>&gt;</span>jdbc:mysql://localhost:3306/tpcc?useSSL=false<span class="tag">&lt;/<span class="name">DBUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="gcc-g-c等工具版本太低">gcc g++ c++等工具版本太低</h3>
<p>更新工具,ubuntu 下可以很方便的更新,但是<code>centos7</code>自带的版本太低了需要用<code>scl</code>来管理切换不通的版本. 问题来了, <code>scl enable xxxx bash</code>确实可以令当前的版本升级 但是 cmake 是按照<code>/usr/bin/gcc</code>之类的来找编译器,所以还是不顶用,但是可以添加全局变量来实现或者更好的方式是下面这种</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake .. -DWITH_BOOST=/data/test/mysql/mysql-8.0.19/boost/boost_1_70_0 -DWITH_DEBUG=1  -DCMAKE_C_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/gcc -DCMAKE_CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/g++</span><br></pre></td></tr></table></figure>
<p>利用 CMAKE 的参数来指定编译器路径.</p>
<p>全局的方式示例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CC=/opt/rh/devtoolset-2/root/usr/bin/gcc</span><br></pre></td></tr></table></figure>
<h3 id="mysql-连接错误">mysql 连接错误</h3>
<p>报错:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)</span><br></pre></td></tr></table></figure>
<p>查看, 在 tmp 目录下确实不存在<code>mysql.sock</code>文件. 在运行<code>mysqld</code>时, 发现在里面有一条信息<code>socket: '/var/lib/mysql/mysql.sock'</code>, 于是建立软连接<code>ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock</code> 问题解决</p>
<h3 id="oltp-bench-tool-使用教程">oltp-bench tool 使用教程</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./oltpbenchmark -h</span><br><span class="line">usage: oltpbenchmark</span><br><span class="line"> -b,--bench &lt;arg&gt;               [required] Benchmark class. Currently</span><br><span class="line">                                supported: [tpcc, tpch, tatp, wikipedia,</span><br><span class="line">                                resourcestresser, twitter, epinions, ycsb,</span><br><span class="line">                                jpab, seats, auctionmark, chbenchmark,</span><br><span class="line">                                voter, linkbench, sibench, noop,</span><br><span class="line">                                smallbank, hyadapt]</span><br><span class="line"> -c,--config &lt;arg&gt;              [required] Workload configuration file</span><br><span class="line">    --clear &lt;arg&gt;               Clear all records in the database for this</span><br><span class="line">                                benchmark</span><br><span class="line">    --create &lt;arg&gt;              Initialize the database for this benchmark</span><br><span class="line"> -d,--directory &lt;arg&gt;           Base directory for the result files,</span><br><span class="line">                                default is current directory</span><br><span class="line">    --dialects-export &lt;arg&gt;     Export benchmark SQL to a dialects file</span><br><span class="line">    --execute &lt;arg&gt;             Execute the benchmark workload</span><br><span class="line"> -h,--help                      Print this help</span><br><span class="line">    --histograms                Print txn histograms</span><br><span class="line"> -im,--interval-monitor &lt;arg&gt;   Throughput Monitoring Interval in</span><br><span class="line">                                milliseconds</span><br><span class="line"> -jh,--json-histograms &lt;arg&gt;    Export histograms to JSON file</span><br><span class="line">    --load &lt;arg&gt;                Load data using the benchmark's data</span><br><span class="line">                                loader</span><br><span class="line"> -o,--output &lt;arg&gt;              Output file (default System.out)</span><br><span class="line">    --output-raw &lt;arg&gt;          Output raw data</span><br><span class="line">    --output-samples &lt;arg&gt;      Output sample data</span><br><span class="line">    --runscript &lt;arg&gt;           Run an SQL script</span><br><span class="line"> -s,--sample &lt;arg&gt;              Sampling window</span><br><span class="line"> -ss                            Verbose Sampling per Transaction</span><br><span class="line"> -t,--timestamp                 Each result file is prepended with a</span><br><span class="line">                                timestamp for the beginning of the</span><br><span class="line">                                experiment</span><br><span class="line"> -ts,--tracescript &lt;arg&gt;        Script of transactions to execute</span><br><span class="line">    --upload &lt;arg&gt;              Upload the result</span><br><span class="line">    --uploadHash &lt;arg&gt;          git hash to be associated with the upload</span><br><span class="line"> -v,--verbose                   Display Messages</span><br></pre></td></tr></table></figure>
<h3 id="mysqld-启动失败">mysqld 启动失败</h3>
<p>查看 mysqld 的日志信息, 一般在<code>/var/log</code>目录下的<code>mysqld</code>文件中</p>
<h3 id="更新-git-gcc-等">更新 git gcc 等</h3>
<p>tlinux2 使用<code>yum --enablerepo=tlinux-testing update git</code>可以升级 git 到 2.19 版本 gcc 升级指引：http://faq.tlinux.oa.com/2018/11/05/tlinux2-2%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85gcc-7/</p>
<h3 id="思考状态的定义">思考状态的定义</h3>
<p>mysql 中有一个指令, 可以获取锁信息, 我们需要改变的就是这个: <code>show status like 'innodb_row_lock_%';</code></p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
</search>
